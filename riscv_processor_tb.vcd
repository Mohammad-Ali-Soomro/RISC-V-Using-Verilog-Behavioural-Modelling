$date
	Mon Apr 28 23:52:37 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module riscv_processor_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # branch_taken $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 $ zero $end
$var wire 32 % write_data [31:0] $end
$var wire 5 & rs2 [4:0] $end
$var wire 5 ' rs1 [4:0] $end
$var wire 1 ( reg_write $end
$var wire 32 ) read_data_mem [31:0] $end
$var wire 32 * read_data2 [31:0] $end
$var wire 32 + read_data1 [31:0] $end
$var wire 5 , rd [4:0] $end
$var wire 32 - pc_plus_4 [31:0] $end
$var wire 32 . pc [31:0] $end
$var wire 7 / opcode [6:0] $end
$var wire 32 0 next_pc [31:0] $end
$var wire 1 1 mem_write $end
$var wire 1 2 mem_to_reg $end
$var wire 1 3 mem_read $end
$var wire 32 4 instruction [31:0] $end
$var wire 32 5 immediate [31:0] $end
$var wire 7 6 funct7 [6:0] $end
$var wire 3 7 funct3 [2:0] $end
$var wire 32 8 branch_target [31:0] $end
$var wire 1 9 branch $end
$var wire 1 : alu_src $end
$var wire 32 ; alu_result [31:0] $end
$var wire 32 < alu_operand2 [31:0] $end
$var wire 2 = alu_op [1:0] $end
$var wire 4 > alu_control_out [3:0] $end
$scope module alu_ctrl $end
$var wire 3 ? funct3 [2:0] $end
$var wire 7 @ funct7 [6:0] $end
$var wire 2 A alu_op [1:0] $end
$var parameter 4 B ADD $end
$var parameter 4 C MUL $end
$var parameter 4 D SUB $end
$var reg 4 E alu_control_out [3:0] $end
$upscope $end
$scope module alu_module $end
$var wire 4 F alu_control [3:0] $end
$var wire 32 G b [31:0] $end
$var wire 1 $ zero $end
$var wire 32 H a [31:0] $end
$var parameter 4 I ADD $end
$var parameter 4 J MUL $end
$var parameter 4 K SUB $end
$var reg 32 L result [31:0] $end
$upscope $end
$scope module control $end
$var wire 7 M opcode [6:0] $end
$var parameter 7 N BRANCH $end
$var parameter 7 O I_TYPE $end
$var parameter 7 P LOAD $end
$var parameter 7 Q R_TYPE $end
$var parameter 7 R STORE $end
$var reg 2 S alu_op [1:0] $end
$var reg 1 : alu_src $end
$var reg 1 9 branch $end
$var reg 1 3 mem_read $end
$var reg 1 2 mem_to_reg $end
$var reg 1 1 mem_write $end
$var reg 1 ( reg_write $end
$upscope $end
$scope module dmem $end
$var wire 32 T address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 3 mem_read $end
$var wire 1 1 mem_write $end
$var wire 32 U write_data [31:0] $end
$var reg 32 V read_data [31:0] $end
$var integer 32 W i [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 X instruction [31:0] $end
$var wire 32 Y address [31:0] $end
$upscope $end
$scope module imm_gen $end
$var wire 32 Z instruction [31:0] $end
$var wire 7 [ opcode [6:0] $end
$var parameter 7 \ BRANCH $end
$var parameter 7 ] I_TYPE $end
$var parameter 7 ^ LOAD $end
$var parameter 7 _ STORE $end
$var reg 32 ` immediate [31:0] $end
$upscope $end
$scope module pc_module $end
$var wire 1 ! clk $end
$var wire 32 a next_pc [31:0] $end
$var wire 1 " reset $end
$var reg 32 b pc [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 5 c rd [4:0] $end
$var wire 1 ( reg_write $end
$var wire 1 " reset $end
$var wire 5 d rs1 [4:0] $end
$var wire 5 e rs2 [4:0] $end
$var wire 32 f write_data [31:0] $end
$var wire 32 g read_data2 [31:0] $end
$var wire 32 h read_data1 [31:0] $end
$var integer 32 i i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 _
b11 ^
b10011 ]
b1100011 \
b100011 R
b110011 Q
b11 P
b10011 O
b1100011 N
b1 K
b10 J
b0 I
b1 D
b10 C
b0 B
$end
#0
$dumpvars
b100000 i
b0 h
b0 g
b1010 f
b1010 e
b0 d
b1 c
b0 b
b100 a
b1010 `
b10011 [
b101000000000000010010011 Z
b0 Y
b101000000000000010010011 X
b100000000 W
b0 V
b0 U
b1010 T
b11 S
b10011 M
b1010 L
b0 H
b1010 G
b0 F
b0 E
b11 A
b0 @
b0 ?
b0 >
b11 =
b1010 <
b1010 ;
1:
09
b1010 8
b0 7
b0 6
b1010 5
b101000000000000010010011 4
03
02
01
b100 0
b10011 /
b0 .
b100 -
b1 ,
b0 +
b0 *
b0 )
1(
b0 '
b1010 &
b1010 %
0$
0#
1"
0!
$end
#5
b100000 i
1!
#10
0!
#15
b100000 i
1!
#20
0!
0"
#25
b10100 %
b10100 f
b10100 ;
b10100 L
b10100 T
b10100 <
b10100 G
b10100 5
b10100 `
b10100 &
b10100 e
b10 ,
b10 c
b1010000000000000100010011 4
b1010000000000000100010011 X
b1010000000000000100010011 Z
b1000 0
b1000 a
b11000 8
b1000 -
b100 .
b100 Y
b100 b
1!
#30
0!
#35
b11110 %
b11110 f
b11110 ;
b11110 L
b11110 T
b10100 *
b10100 U
b10100 g
b1010 +
b1010 H
b1010 h
1(
0:
b10 =
b10 A
b10 S
b0 5
b0 `
b110011 [
b10 &
b10 e
b1 '
b1 d
b11 ,
b11 c
b110011 /
b110011 M
b1000001000000110110011 4
b1000001000000110110011 X
b1000001000000110110011 Z
b1100 0
b1100 a
b1000 8
b1100 -
b1000 .
b1000 Y
b1000 b
1!
#40
0!
#45
b10100 %
b10100 f
b1010 <
b1010 G
b10100 ;
b10100 L
b10100 T
b1 >
b1 E
b1 F
b1010 *
b1010 U
b1010 g
b11110 +
b11110 H
b11110 h
b100000 6
b100000 @
b1 &
b1 e
b11 '
b11 d
b100 ,
b100 c
b1000000000100011000001000110011 4
b1000000000100011000001000110011 X
b1000000000100011000001000110011 Z
b10000 0
b10000 a
b1100 8
b10000 -
b1100 .
b1100 Y
b1100 b
1!
#50
0!
#55
b11001000 %
b11001000 f
b10100 <
b10100 G
b11001000 ;
b11001000 L
b11001000 T
b10 >
b10 E
b10 F
b10100 *
b10100 U
b10100 g
b1010 +
b1010 H
b1010 h
b1 6
b1 @
b10 &
b10 e
b1 '
b1 d
b101 ,
b101 c
b10001000001000001010110011 4
b10001000001000001010110011 X
b10001000001000001010110011 Z
b10100 0
b10100 a
b10000 8
b10100 -
b10000 .
b10000 Y
b10000 b
1!
#60
0!
#65
b0 %
b0 f
1$
b0 ;
b0 L
b0 T
b0 <
b0 G
b11110 *
b11110 U
b11110 g
b0 +
b0 H
b0 h
b0 >
b0 E
b0 F
11
1:
0(
b0 =
b0 A
b0 S
b100011 [
b0 6
b0 @
b11 &
b11 e
b0 '
b0 d
b10 7
b10 ?
b0 ,
b0 c
b100011 /
b100011 M
b1100000010000000100011 4
b1100000010000000100011 X
b1100000010000000100011 Z
b11000 0
b11000 a
b10100 8
b11000 -
b10100 .
b10100 Y
b10100 b
1!
#70
0!
#75
b11110 %
b11110 f
b11110 )
b11110 V
b0 *
b0 U
b0 g
13
1(
12
01
1:
b11 [
b0 &
b0 e
b110 ,
b110 c
b11 /
b11 M
b10001100000011 4
b10001100000011 X
b10001100000011 Z
b11100 0
b11100 a
b11000 8
b11100 -
b11000 .
b11000 Y
b11000 b
1!
#80
0!
#85
0$
b11111111111111111111111111110110 ;
b11111111111111111111111111110110 L
b11111111111111111111111111110110 T
0#
b0 )
b0 V
b11111111111111111111111111110110 %
b11111111111111111111111111110110 f
b10100 <
b10100 G
b10100 *
b10100 U
b10100 g
b1010 +
b1010 H
b1010 h
b1 >
b1 E
b1 F
19
b1 =
b1 A
b1 S
03
0(
02
0:
b1000 5
b1000 `
b1100011 [
b10 &
b10 e
b1 '
b1 d
b0 7
b0 ?
b1000 ,
b1000 c
b1100011 /
b1100011 M
b1000001000010001100011 4
b1000001000010001100011 X
b1000001000010001100011 Z
b100000 0
b100000 a
b100100 8
b100000 -
b11100 .
b11100 Y
b11100 b
1!
#90
0!
#95
b1 %
b1 f
b1 ;
b1 L
b1 T
b1 <
b1 G
b0 >
b0 E
b0 F
b1010 *
b1010 U
b1010 g
b0 +
b0 H
b0 h
1(
1:
09
b11 =
b11 A
b11 S
b1 5
b1 `
b10011 [
b1 &
b1 e
b0 '
b0 d
b111 ,
b111 c
b10011 /
b10011 M
b100000000001110010011 4
b100000000001110010011 X
b100000000001110010011 Z
b100100 0
b100100 a
b100001 8
b100100 -
b100000 .
b100000 Y
b100000 b
1!
#100
0!
#105
1#
b0 %
b0 f
1$
b0 ;
b0 L
b0 T
b1 >
b1 E
b1 F
b10100 <
b10100 G
b10100 *
b10100 U
b10100 g
b10100 +
b10100 H
b10100 h
19
0(
0:
b1 =
b1 A
b1 S
b1000 5
b1000 `
b1100011 [
b10 &
b10 e
b100 '
b100 d
b1000 ,
b1000 c
b1100011 /
b1100011 M
b1000100000010001100011 4
b1000100000010001100011 X
b1000100000010001100011 Z
b101100 0
b101100 a
b101100 8
b101000 -
b100100 .
b100100 Y
b100100 b
1!
#110
0!
#115
b0 %
b0 f
b0 <
b0 G
1$
b0 ;
b0 L
b0 T
0#
b0 >
b0 E
b0 F
b0 *
b0 U
b0 g
b0 +
b0 H
b0 h
09
b0 =
b0 A
b0 S
b0 5
b0 `
b0 [
b0 &
b0 e
b0 '
b0 d
b0 ,
b0 c
b0 /
b0 M
b0 4
b0 X
b0 Z
b110000 0
b110000 a
b101100 8
b110000 -
b101100 .
b101100 Y
b101100 b
1!
#120
0!
#125
bx %
bx f
bx <
bx G
x$
bx ;
bx L
bx T
bx *
bx U
bx g
bx +
bx H
bx h
bx [
bx 6
bx @
bx &
bx e
bx '
bx d
bx 7
bx ?
bx ,
bx c
bx /
bx M
bx 4
bx X
bx Z
b110100 0
b110100 a
b110000 8
b110100 -
b110000 .
b110000 Y
b110000 b
1!
#130
0!
#135
b111000 0
b111000 a
b110100 8
b111000 -
b110100 .
b110100 Y
b110100 b
1!
#140
0!
#145
b111100 0
b111100 a
b111000 8
b111100 -
b111000 .
b111000 Y
b111000 b
1!
#150
0!
#155
b1000000 0
b1000000 a
b111100 8
b1000000 -
b111100 .
b111100 Y
b111100 b
1!
#160
0!
#165
b1000100 0
b1000100 a
b1000000 8
b1000100 -
b1000000 .
b1000000 Y
b1000000 b
1!
#170
0!
#175
b1001000 0
b1001000 a
b1000100 8
b1001000 -
b1000100 .
b1000100 Y
b1000100 b
1!
#180
0!
#185
b1001100 0
b1001100 a
b1001000 8
b1001100 -
b1001000 .
b1001000 Y
b1001000 b
1!
#190
0!
#195
b1010000 0
b1010000 a
b1001100 8
b1010000 -
b1001100 .
b1001100 Y
b1001100 b
1!
#200
0!
#205
b1010100 0
b1010100 a
b1010000 8
b1010100 -
b1010000 .
b1010000 Y
b1010000 b
1!
#210
0!
#215
b1011000 0
b1011000 a
b1010100 8
b1011000 -
b1010100 .
b1010100 Y
b1010100 b
1!
#220
0!
#225
b1011100 0
b1011100 a
b1011000 8
b1011100 -
b1011000 .
b1011000 Y
b1011000 b
1!
#230
0!
#235
b1100000 0
b1100000 a
b1011100 8
b1100000 -
b1011100 .
b1011100 Y
b1011100 b
1!
#240
0!
#245
b1100100 0
b1100100 a
b1100000 8
b1100100 -
b1100000 .
b1100000 Y
b1100000 b
1!
#250
0!
#255
b1101000 0
b1101000 a
b1100100 8
b1101000 -
b1100100 .
b1100100 Y
b1100100 b
1!
#260
0!
#265
b1101100 0
b1101100 a
b1101000 8
b1101100 -
b1101000 .
b1101000 Y
b1101000 b
1!
#270
0!
#275
b1110000 0
b1110000 a
b1101100 8
b1110000 -
b1101100 .
b1101100 Y
b1101100 b
1!
#280
0!
#285
b1110100 0
b1110100 a
b1110000 8
b1110100 -
b1110000 .
b1110000 Y
b1110000 b
1!
#290
0!
#295
b1111000 0
b1111000 a
b1110100 8
b1111000 -
b1110100 .
b1110100 Y
b1110100 b
1!
#300
0!
#305
b1111100 0
b1111100 a
b1111000 8
b1111100 -
b1111000 .
b1111000 Y
b1111000 b
1!
#310
0!
#315
b10000000 0
b10000000 a
b1111100 8
b10000000 -
b1111100 .
b1111100 Y
b1111100 b
1!
#320
0!
#325
b10000100 0
b10000100 a
b10000000 8
b10000100 -
b10000000 .
b10000000 Y
b10000000 b
1!
#330
0!
#335
b10001000 0
b10001000 a
b10000100 8
b10001000 -
b10000100 .
b10000100 Y
b10000100 b
1!
#340
0!
#345
b10001100 0
b10001100 a
b10001000 8
b10001100 -
b10001000 .
b10001000 Y
b10001000 b
1!
#350
0!
#355
b10010000 0
b10010000 a
b10001100 8
b10010000 -
b10001100 .
b10001100 Y
b10001100 b
1!
#360
0!
#365
b10010100 0
b10010100 a
b10010000 8
b10010100 -
b10010000 .
b10010000 Y
b10010000 b
1!
#370
0!
#375
b10011000 0
b10011000 a
b10010100 8
b10011000 -
b10010100 .
b10010100 Y
b10010100 b
1!
#380
0!
#385
b10011100 0
b10011100 a
b10011000 8
b10011100 -
b10011000 .
b10011000 Y
b10011000 b
1!
#390
0!
#395
b10100000 0
b10100000 a
b10011100 8
b10100000 -
b10011100 .
b10011100 Y
b10011100 b
1!
#400
0!
#405
b10100100 0
b10100100 a
b10100000 8
b10100100 -
b10100000 .
b10100000 Y
b10100000 b
1!
#410
0!
#415
b10101000 0
b10101000 a
b10100100 8
b10101000 -
b10100100 .
b10100100 Y
b10100100 b
1!
#420
0!
#425
b10101100 0
b10101100 a
b10101000 8
b10101100 -
b10101000 .
b10101000 Y
b10101000 b
1!
#430
0!
#435
b10110000 0
b10110000 a
b10101100 8
b10110000 -
b10101100 .
b10101100 Y
b10101100 b
1!
#440
0!
#445
b10110100 0
b10110100 a
b10110000 8
b10110100 -
b10110000 .
b10110000 Y
b10110000 b
1!
#450
0!
#455
b10111000 0
b10111000 a
b10110100 8
b10111000 -
b10110100 .
b10110100 Y
b10110100 b
1!
#460
0!
#465
b10111100 0
b10111100 a
b10111000 8
b10111100 -
b10111000 .
b10111000 Y
b10111000 b
1!
#470
0!
#475
b11000000 0
b11000000 a
b10111100 8
b11000000 -
b10111100 .
b10111100 Y
b10111100 b
1!
#480
0!
#485
b11000100 0
b11000100 a
b11000000 8
b11000100 -
b11000000 .
b11000000 Y
b11000000 b
1!
#490
0!
#495
b11001000 0
b11001000 a
b11000100 8
b11001000 -
b11000100 .
b11000100 Y
b11000100 b
1!
#500
0!
#505
b11001100 0
b11001100 a
b11001000 8
b11001100 -
b11001000 .
b11001000 Y
b11001000 b
1!
#510
0!
#515
b11010000 0
b11010000 a
b11001100 8
b11010000 -
b11001100 .
b11001100 Y
b11001100 b
1!
#520
0!
